# Generated by Django 5.2.1 on 2025-06-27 00:55

from django.db import migrations

def crear_grupos_y_permisos(apps, schema_editor):
    """
    Crear los grupos de roles y asignar permisos correspondientes
    """
    from django.contrib.auth.models import Group, Permission
    from django.contrib.contenttypes.models import ContentType
    
    # Definir los roles
    ROLES = ['Administrador', 'Cuerpo médico', 'Cuerpo técnico', 'Dirigencia']
    
    # Crear los grupos
    for role_name in ROLES:
        Group.objects.get_or_create(name=role_name)
    
    # Obtener los grupos creados
    admin_group = Group.objects.get(name='Administrador')
    medico_group = Group.objects.get(name='Cuerpo médico')
    tecnico_group = Group.objects.get(name='Cuerpo técnico')
    dirigencia_group = Group.objects.get(name='Dirigencia')
    
    # Obtener todos los permisos para todos los modelos de la app 'gestion_clinica'
    app_content_types = ContentType.objects.filter(app_label='gestion_clinica')
    all_permissions = Permission.objects.filter(content_type__in=app_content_types)
    
    # También incluir permisos para el modelo User y otros modelos relevantes
    user_content_type = ContentType.objects.filter(app_label='auth', model='user')
    user_permissions = Permission.objects.filter(content_type__in=user_content_type)
    
    # Asignar todos los permisos a Administrador (incluyendo gestión de usuarios)
    admin_permissions = list(all_permissions) + list(user_permissions)
    admin_group.permissions.set(admin_permissions)
    
    # Asignar permisos de Lectura y Escritura a Cuerpo médico (sin gestión de usuarios)
    medico_group.permissions.set(all_permissions)
    
    # Asignar permisos de SOLO LECTURA a Cuerpo técnico y Dirigencia
    view_permissions = all_permissions.filter(codename__startswith='view_')
    tecnico_group.permissions.set(view_permissions)
    dirigencia_group.permissions.set(view_permissions)

def eliminar_grupos_y_permisos(apps, schema_editor):
    """
    Función para revertir la migración si es necesario
    """
    from django.contrib.auth.models import Group
    
    ROLES = ['Administrador', 'Cuerpo médico', 'Cuerpo técnico', 'Dirigencia']
    
    for role_name in ROLES:
        try:
            group = Group.objects.get(name=role_name)
            group.delete()
        except Group.DoesNotExist:
            pass

class Migration(migrations.Migration):

    dependencies = [
        ('gestion_clinica', '0016_userprofile'),
    ]

    operations = [
        migrations.RunPython(crear_grupos_y_permisos, eliminar_grupos_y_permisos),
    ]
